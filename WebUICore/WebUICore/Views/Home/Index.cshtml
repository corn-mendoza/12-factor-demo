@using Pivotal.Utilities;
@using WebUICore.ViewModels;

@model CloudFoundryViewModel
@{
    ViewData["Title"] = "Home Page";
}

<div class="row">
    <div class="list-unstyled">

        <h3>The Twelve Factors</h3>
        <ul>
            <li>
                <h4>I. Codebase: One codebase tracked in revision control, many deploys</h4>
                Allows rapid deployment of new application versions. Use your existing CI/CD pipelines and tools with PCF to enable blue-green deployments with zero downtime. <br />
                <a class="btn btn-primary" asp-area="" asp-controller="ZeroDowntime" asp-action="Index">Zero Downtime Example</a>
            </li>
            <li>
                <h4>II. Dependencies: Explicitly declare and isolate dependencies</h4>
                Define service dependencies to ensure the application executes as designed. Utilize manifest files to specify which services need to be available when the application is deployed. When deploying on PCF, the platform will check to see if the services are available when the application is being deployed.<br />
                <a class="btn btn-primary" href="@(Model.ConfigData.ManifestUrl)" target="_blank">Manifest File Example</a>
            </li>
            <li>
                <h4>III. Config: Store config in the environment</h4>
                Store configuration information so that data is stored independent of the application code to avoid having to build new versions just for configuration changes. This is a model that scales up smoothly as the app naturally expands into more deploys over its lifetime. PCF provides the ability to load configuration data in the environment using service brokers and a user provided service binding.<br />
                <a class="btn btn-primary" asp-area="" asp-controller="Configuration" asp-action="Index">Configuration Examples</a>
            </li>
            <li>
                <h4>IV. Backing services: Treat backing services as attached resources</h4>
                Resources can be attached to and detached from deploys at will. For example, if the app’s database is misbehaving due to a hardware issue, the app’s administrator might spin up a new database server restored from a recent backup. The current production database could be detached, and the new database attached – all without any code changes. Bind services to applications to inject the required configuration data into the environment at runtime. This can also help eliminate the need for different configuration files to support multiple environments.<br />
                <a class="btn btn-primary" asp-area="" asp-controller="Services" asp-action="Index">Service Discovery</a>&nbsp;
                <a class="btn btn-primary" href="https://apps.sys.islands.cloud/organizations/893f5f47-b8d5-4be3-a562-937b612eb564/spaces/39cd6817-23a4-4e31-bf16-44d051cfe6be/applications/30012359-e4eb-4ad6-a79d-a7eb79d56471/marketplace">Services Marketplace</a>
            </li>
            <li>
                <h4>V. Build, release, run: Strictly separate build and run stages</h4>
                Builds are initiated by the app’s developers whenever new code is deployed. Runtime execution, by contrast, can happen automatically in cases such as a server reboot, or a crashed process being restarted by the process manager. PCF can automatically detect if the application is unhealthy and automatically restart the application without any operator inteventrion. <br />
            </li>
            <li>
                <h4>VI. Processes: Execute the app as one or more stateless processes</h4>
                Store session data outside of the application runtime. This will allow horizontal scalability of the application.<br />
                <a class="btn btn-primary" asp-area="" asp-controller="Services" asp-action="Index">Redis Session Example</a>
            </li>
            <li>
                <h4>VII. Port binding: Export services via port binding</h4>
                A twelve-factor app is completely self-contained and does not rely on runtime injection of a webserver into the execution environment to create a web-facing service. PCF automaticall binds to a port, and listens to requests coming in on that port.<br />
            </li>
            <li>
                <h4>VIII. Concurrency: Scale out via the process model</h4>
                The share-nothing, horizontally partitionable nature of twelve-factor app processes means that adding more concurrency is a simple and reliable operation. PCF can handle autoscaling based on metrics defined by the developers.<br />
                <a class="btn btn-primary" href="https://apps.sys.islands.cloud/organizations/893f5f47-b8d5-4be3-a562-937b612eb564/spaces/39cd6817-23a4-4e31-bf16-44d051cfe6be/applications/d63f8570-e5a9-4186-959e-256633be7fb8">Application/Services Scaling</a>
            </li>
            <li>
                <h4>IX. Disposability: Maximize robustness with fast startup and graceful shutdown</h4>
                Processes should also be robust against sudden death, in the case of a failure in the underlying hardware or platform.<br />
                <a class="btn btn-primary" asp-area="" asp-controller="Services" asp-action="Index">Circuit Breaker Example</a>
            </li>
            <li>
                <h4>X. Dev/prod parity: Keep development, staging, and production as similar as possible</h4>
                Differences between backing services mean that tiny incompatibilities crop up, causing code that worked and passed tests in development or staging to fail in production. PCF provides for the ability to deploy applications in a manner that can help developers build and test applications that mimic the production environment.<br />
                <a class="btn btn-primary" href="https://apps.sys.islands.cloud/">Using Orgs and Spaces</a>
            </li>
            <li>
                <h4>XI. Logs: Treat logs as event streams</h4>
                A twelve-factor app never concerns itself with routing or storage of its output stream. It should not attempt to write to or manage logfiles. PCF allows developers to continue to utilize their existing logging frameworks and allow for high performance, non-blocking log streaming.<br />
                <a class="btn btn-primary" href="https://apps.sys.islands.cloud/organizations/893f5f47-b8d5-4be3-a562-937b612eb564/spaces/39cd6817-23a4-4e31-bf16-44d051cfe6be/applications/30012359-e4eb-4ad6-a79d-a7eb79d56471/logs">Application Logging</a>
            </li>
            <li>
                <h4>XII. Admin processes: Run admin/management tasks as one-off processes</h4>
                One-off admin processes should be run in an identical environment as the regular long-running processes of the app. They run against a release, using the same codebase and config as any process run against that release. Admin code must ship with application code to avoid synchronization issues. PCF provides this ability through running tasks using the same containerization as the application.<br />
                <a class="btn btn-primary" href="https://apps.sys.islands.cloud/organizations/893f5f47-b8d5-4be3-a562-937b612eb564/spaces/39cd6817-23a4-4e31-bf16-44d051cfe6be/applications/30012359-e4eb-4ad6-a79d-a7eb79d56471/tasks">Running Admin Tasks</a>
            </li>
        </ul>
    </div>
</div>
